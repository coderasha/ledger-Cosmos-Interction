{"remainingRequest":"/home/admin1/Desktop/ledger-cosmos-js (copy)/node_modules/babel-loader/lib/index.js!/home/admin1/Desktop/ledger-cosmos-js (copy)/src/index.js","dependencies":[{"path":"/home/admin1/Desktop/ledger-cosmos-js (copy)/src/index.js","mtime":1573038128251},{"path":"/home/admin1/Desktop/ledger-cosmos-js (copy)/.babelrc","mtime":1573041144236},{"path":"/home/admin1/Desktop/ledger-cosmos-js (copy)/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/admin1/Desktop/ledger-cosmos-js (copy)/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/admin1/Desktop/ledger-cosmos-js (copy)/src/index.js"],"names":["crypto","Ripemd160","bech32","serializePathv1","signSendChunkv1","serializePathv2","signSendChunkv2","APP_KEY","CHUNK_SIZE","CLA","INS","errorCodeToString","getVersion","processErrorResponse","CosmosApp","transport","scrambleKey","Error","decorateAppAPIMethods","path","versionResponse","major","return_code","error_message","message","serializePath","serializedPath","chunks","push","buffer","Buffer","from","i","length","end","slice","send","then","response","errorCodeData","returnCode","result","appName","appVersion","flagLen","flagsValue","appNameLen","toString","idx","appVersionLen","appFlagsLen","flag_recovery","flag_signed_mcu_code","flag_onboarded","flag_pin_validated","targetId","pos","secureElementVersionLen","seVersion","flagsLen","flag","mcuVersionLen","tmp","mcuVersion","data","concat","serializeHRP","GET_ADDR_SECP256K1","compressedPk","pk","compressed_pk","hrp","bech32Address","bech32_address","chunkIdx","chunkNum","chunk","signGetChunks","signSendChunk","signature","buf","alloc","writeUInt8","write","hashSha256","createHash","update","digest","hashRip","encode","toWords"],"mappings":"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","sourcesContent":["/** ******************************************************************************\n *  (c) 2019 ZondaX GmbH\n *  (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ******************************************************************************* */\n\nimport crypto from \"crypto\";\nimport Ripemd160 from \"ripemd160\";\nimport bech32 from \"bech32\";\nimport { serializePathv1, signSendChunkv1 } from \"./helperV1\";\nimport { serializePathv2, signSendChunkv2 } from \"./helperV2\";\nimport { APP_KEY, CHUNK_SIZE, CLA, INS, errorCodeToString, getVersion, processErrorResponse } from \"./common\";\n\nexport default class CosmosApp {\n  constructor(transport, scrambleKey = APP_KEY) {\n    if (!transport) {\n      throw new Error(\"Transport has not been defined\");\n    }\n\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\"getVersion\", \"sign\", \"getAddressAndPubKey\", \"appInfo\", \"deviceInfo\", \"getBech32FromPK\"],\n      scrambleKey,\n    );\n  }\n\n  static serializeHRP(hrp) {\n    if (hrp == null || hrp.length < 3 || hrp.length > 83) {\n      throw new Error(\"Invalid HRP\");\n    }\n    const buf = Buffer.alloc(1 + hrp.length);\n    buf.writeUInt8(hrp.length, 0);\n    buf.write(hrp, 1);\n    return buf;\n  }\n\n  static getBech32FromPK(hrp, pk) {\n    if (pk.length !== 33) {\n      throw new Error(\"expected compressed public key [31 bytes]\");\n    }\n    const hashSha256 = crypto\n      .createHash(\"sha256\")\n      .update(pk)\n      .digest();\n    const hashRip = new Ripemd160().update(hashSha256).digest();\n    return bech32.encode(hrp, bech32.toWords(hashRip));\n  }\n\n  async serializePath(path) {\n    this.versionResponse = await getVersion(this.transport);\n    switch (this.versionResponse.major) {\n      case 1:\n        return serializePathv1(path);\n      case 2:\n        return serializePathv2(path);\n      default:\n        return {\n          return_code: 0x6400,\n          error_message: \"App Version is not supported\",\n        };\n    }\n  }\n\n  async signGetChunks(path, message) {\n    const serializedPath = await this.serializePath(path);\n\n    const chunks = [];\n    chunks.push(serializedPath);\n    const buffer = Buffer.from(message);\n\n    for (let i = 0; i < buffer.length; i += CHUNK_SIZE) {\n      let end = i + CHUNK_SIZE;\n      if (i > buffer.length) {\n        end = buffer.length;\n      }\n      chunks.push(buffer.slice(i, end));\n    }\n\n    return chunks;\n  }\n\n  async getVersion() {\n    this.versionResponse = await getVersion(this.transport);\n    return this.versionResponse;\n  }\n\n  async appInfo() {\n    return this.transport.send(0xb0, 0x01, 0, 0).then(response => {\n      const errorCodeData = response.slice(-2);\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n\n      const result = {};\n\n      let appName = \"err\";\n      let appVersion = \"err\";\n      let flagLen = 0;\n      let flagsValue = 0;\n\n      if (response[0] !== 1) {\n        // Ledger responds with format ID 1. There is no spec for any format != 1\n        result.error_message = \"response format ID not recognized\";\n        result.return_code = 0x9001;\n      } else {\n        const appNameLen = response[1];\n        appName = response.slice(2, 2 + appNameLen).toString(\"ascii\");\n        let idx = 2 + appNameLen;\n        const appVersionLen = response[idx];\n        idx += 1;\n        appVersion = response.slice(idx, idx + appVersionLen).toString(\"ascii\");\n        idx += appVersionLen;\n        const appFlagsLen = response[idx];\n        idx += 1;\n        flagLen = appFlagsLen;\n        flagsValue = response[idx];\n      }\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n        // //\n        appName,\n        appVersion,\n        flagLen,\n        flagsValue,\n        // eslint-disable-next-line no-bitwise\n        flag_recovery: (flagsValue & 1) !== 0,\n        // eslint-disable-next-line no-bitwise\n        flag_signed_mcu_code: (flagsValue & 2) !== 0,\n        // eslint-disable-next-line no-bitwise\n        flag_onboarded: (flagsValue & 4) !== 0,\n        // eslint-disable-next-line no-bitwise\n        flag_pin_validated: (flagsValue & 128) !== 0,\n      };\n    }, processErrorResponse);\n  }\n\n  async deviceInfo() {\n    return this.transport.send(0xe0, 0x01, 0, 0, Buffer.from([]), [0x9000, 0x6e00]).then(response => {\n      const errorCodeData = response.slice(-2);\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n\n      if (returnCode === 0x6e00) {\n        return {\n          return_code: returnCode,\n          error_message: \"This command is only available in the Dashboard\",\n        };\n      }\n\n      const targetId = response.slice(0, 4).toString(\"hex\");\n\n      let pos = 4;\n      const secureElementVersionLen = response[pos];\n      pos += 1;\n      const seVersion = response.slice(pos, pos + secureElementVersionLen).toString();\n      pos += secureElementVersionLen;\n\n      const flagsLen = response[pos];\n      pos += 1;\n      const flag = response.slice(pos, pos + flagsLen).toString(\"hex\");\n      pos += flagsLen;\n\n      const mcuVersionLen = response[pos];\n      pos += 1;\n      // Patch issue in mcu version\n      let tmp = response.slice(pos, pos + mcuVersionLen);\n      if (tmp[mcuVersionLen - 1] === 0) {\n        tmp = response.slice(pos, pos + mcuVersionLen - 1);\n      }\n      const mcuVersion = tmp.toString();\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n        // //\n        targetId,\n        seVersion,\n        flag,\n        mcuVersion,\n      };\n    }, processErrorResponse);\n  }\n\n  async publicKey(path) {\n    const serializedPath = await this.serializePath(path);\n    const data = Buffer.concat([CosmosApp.serializeHRP(\"cosmos\"), serializedPath]);\n    return this.transport.send(CLA, INS.GET_ADDR_SECP256K1, 0, 0, data, [0x9000]).then(response => {\n      const errorCodeData = response.slice(-2);\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n      const compressedPk = Buffer.from(response.slice(0, 33));\n\n      return {\n        pk: \"OBSOLETE PROPERTY\",\n        compressed_pk: compressedPk,\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n      };\n    }, processErrorResponse);\n  }\n\n  async getAddressAndPubKey(path, hrp) {\n    const serializedPath = await this.serializePath(path);\n    const data = Buffer.concat([CosmosApp.serializeHRP(hrp), serializedPath]);\n    return this.transport.send(CLA, INS.GET_ADDR_SECP256K1, 1, 0, data, [0x9000]).then(response => {\n      const errorCodeData = response.slice(-2);\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n\n      const compressedPk = Buffer.from(response.slice(0, 33));\n      const bech32Address = Buffer.from(response.slice(33, -2)).toString();\n\n      return {\n        bech32_address: bech32Address,\n        compressed_pk: compressedPk,\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n      };\n    }, processErrorResponse);\n  }\n\n  async signSendChunk(chunkIdx, chunkNum, chunk) {\n    switch (this.versionResponse.major) {\n      case 1:\n        return signSendChunkv1(this, chunkIdx, chunkNum, chunk);\n      case 2:\n        return signSendChunkv2(this, chunkIdx, chunkNum, chunk);\n      default:\n        return {\n          return_code: 0x6400,\n          error_message: \"App Version is not supported\",\n        };\n    }\n  }\n\n  async sign(path, message) {\n    const chunks = await this.signGetChunks(path, message);\n\n    return this.signSendChunk(1, chunks.length, chunks[0], [0x9000]).then(async response => {\n      let result = {\n        return_code: response.return_code,\n        error_message: response.error_message,\n        signature: null,\n      };\n\n      for (let i = 1; i < chunks.length; i += 1) {\n        // eslint-disable-next-line no-await-in-loop\n        result = await this.signSendChunk(1 + i, chunks.length, chunks[i]);\n        if (result.return_code !== 0x9000) {\n          break;\n        }\n      }\n\n      return {\n        return_code: result.return_code,\n        error_message: result.error_message,\n        // ///\n        signature: result.signature,\n      };\n    }, processErrorResponse);\n  }\n}\n"]}]}